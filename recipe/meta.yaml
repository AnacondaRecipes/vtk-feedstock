{% set version = "9.4.1" %}
{% set build = 0 %}

{% set minor_version = ".".join(version.split(".")[:2]) %}

{% set build = build + 100 %}   # [build_variant == "osmesa"]
{% set build = build + 200 %}   # [build_variant == "qt"]
# typically, osmesa is selected by installing or not installing
# mesalib, but it could also be selected via the build string:
# `vtk * osmesa*` for osmesa
# `vtk * egl*` for egl
# `vtk * qt*` for qt-main
# The 'build: string: ...' needs to be set in each output and the top-level
# otherwise it won't be correct in the final build.

package:
  name: vtk
  version: {{ version }}

source:
  url: http://www.vtk.org/files/release/{{ minor_version }}/VTK-{{ version }}.tar.gz
  sha256: c253b0c8d002aaf98871c6d0cb76afc4936c301b72358a08d5f3f72ef8bc4529
  patches:
    - patches/fix-threads-windows.patch  # [win]
    # https://github.com/conda-forge/vtk-feedstock/pull/282
    # https://gitlab.kitware.com/vtk/vtk/-/issues/18365#note_1079278
    # https://gitlab.kitware.com/vtk/vtk/-/merge_requests/9987
    - patches/9987_try_except_python_import.patch  # [not win]
    # https://gitlab.kitware.com/vtk/vtk/-/merge_requests/11486
    #- patches/11486.patch

build:
  number: {{ build }}
  string: "{{ build_variant }}_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ build }}"
  # TODO: The build takes a couple of hours for every Python variant.
  # Remove py<312 before the final build.
  # TODO: Remove win before the final build
  skip: True  # [win or s390x or py<312]
  ignore_run_exports_from:
    - ffmpeg  # [not win]
  run_exports:
    - {{ pin_subpackage('vtk', max_pin='x.x.x') }}
  track_features:
    - vtk-egl  # [build_variant == "egl"]
    - vtk-osmesa  # [build_variant == "osmesa"]

  features:
    - mesalib  # [build_variant == "osmesa"]

requirements:
  build:
    - {{ compiler("cxx") }}
    - {{ compiler('fortran') }}  # [build_variant != "qt"]
    - cmake
    - ninja
    - patch  # [not win]
    - m2-patch  # [win]
    - pugixml
  {% if SUBDIR in ('linux-64', 'linux-aarch64') %}
    - {{ cdt('libice-devel') }}
    - {{ cdt('libselinux') }}
    - {{ cdt('libsm-devel') }}
    - {{ cdt('libuuid') }}
    - {{ cdt('libx11-devel') }}
    - {{ cdt('libxau') }}
    - {{ cdt('libxau') }}
    - {{ cdt('libxcb') }}
    - {{ cdt('libxdamage') }}
    - {{ cdt('libxext') }}
    - {{ cdt('libxfixes') }}
    - {{ cdt('libxt-devel') }}
    - {{ cdt('libxxf86vm') }}
    - {{ cdt('mesa-dri-drivers') }}
    - {{ cdt('mesa-libegl-devel') }}
    - {{ cdt('mesa-libegl') }}
    - {{ cdt('mesa-libgbm') }}
    - {{ cdt('mesa-libgl-devel') }}
    - {{ cdt('xorg-x11-proto-devel') }}
  {% endif %}
  host:
    - python
    # VTK Third Party dependencies
    - zlib {{ zlib }}
    - freetype 2.12
    - hdf5 {{ hdf5 }}
    - libxml2 {{ libxml2 }}
    - libpng {{ libpng }}
    - jpeg {{ jpeg }}
    - libtiff {{ libtiff }}
    - jsoncpp 1.9.4
    - expat {{ expat }}
    # Limit TBB version. The oneAPI (2021.*) release removed the `tbb_stddef.h`
    # header, which causes configure-time errors. The 2020 release is probably
    # safe to use but generates *tons* of deprecation warnings that (may) hint
    # at subtle breaks. Given all that, we set the limit to the latest version
    # available when VTK 8.2 was released.
    - tbb 2022.0.0
    - tbb-devel 2022.0.0
    - mesalib  # [build_variant == "osmesa"]
    - libnetcdf {{ libnetcdf }}
    - lz4-c 1.9.4
    - boost-cpp {{ boost_cpp }}
    - tk  # [not win and (build_variant == "qt")]
    - ffmpeg 6.1.1
    - utfcpp 3.2.1
    - eigen 3.4.0
    - double-conversion 3.1.5
    - pugixml 1.11.4
    - glew 2.2.0  # [build_variant == "qt"]
    - libogg 1.3.5
    - libtheora 1
    - nlohmann_json 3.11.2
    - proj {{ proj }}
    - loguru
    - sqlite {{ sqlite }}
    - gl2ps 1.4.2
    - qt-main =5  # [not ppc64le and (build_variant == "qt")]
    - xz {{ xz }}
  run:
    - python
    - zlib
    - freetype
    - hdf5
    - libxml2
    - libpng
    - jpeg
    - libtiff
    - jsoncpp
    - expat
    - tbb
    - mesalib  # [build_variant == "osmesa"]
    - libnetcdf
    - lz4-c
    - tk  # [not win and (build_variant == "qt")]
    - ffmpeg
    - {{ pin_compatible('utfcpp') }}
    - {{ pin_compatible('eigen') }}
    - {{ pin_compatible('double-conversion') }}
    - glew
    - libogg
    - libtheora
    - proj
    - {{ pin_compatible('loguru') }}
    - sqlite
    - gl2ps
    # Not all our Qt builds in distribution seem to export a pinning.
    - {{ pin_compatible('qt-main') }}  # [not ppc64le and (build_variant == "qt")]
    - xz

  run_constrained:
    # Paraview bundles its own VTK that has conflicting Python vtkmodules
    - paraview ==9999999999

test:
  imports:
    - vtk
    - vtk.vtkChartsCore
    - vtk.vtkCommonCore
    - vtk.vtkFiltersCore
    - vtk.vtkFiltersGeneric
    - vtk.vtkGeovisCore
    - vtk.vtkFiltersHybrid
    - vtk.vtkIOCore
    - vtk.vtkImagingCore
    - vtk.vtkInfovisCore
    - vtk.vtkRenderingCore
    - vtk.vtkViewsCore
    - vtk.vtkRenderingVolume
    - vtk.vtkInteractionWidgets
    - vtk.vtkWebGLExporter
    - vtk.tk.vtkTkRenderWidget  # [not win and (build_variant == "qt")]
    - vtkmodules
    - vtkmodules.vtkChartsCore
    - vtkmodules.vtkCommonCore
    - vtkmodules.vtkFiltersCore
    - vtkmodules.vtkFiltersGeneric
    - vtkmodules.vtkGeovisCore
    - vtkmodules.vtkFiltersHybrid
    - vtkmodules.vtkIOCore
    - vtkmodules.vtkImagingCore
    - vtkmodules.vtkInfovisCore
    - vtkmodules.vtkRenderingCore
    - vtkmodules.vtkViewsCore
    - vtkmodules.vtkRenderingQt  # [build_variant == "qt"]
    - vtkmodules.vtkRenderingVolume
    - vtkmodules.vtkInteractionWidgets
    - vtkmodules.vtkWebCore
    - vtkmodules.web
    - vtkmodules.web.utils

  requires:
    - pip
    - setuptools

  commands:
    - pip check
    - test $(pip list | grep vtk | tr -s " " | grep $PKG_VERSION | wc -l) -eq 1  # [unix]
    - pip list | findstr "vtk"  # [win]
    {% set vtk_qt_libs = [
        "vtkGUISupportQt",
        "vtkRenderingQt"
    ] %}
    {% for vtk_lib in vtk_qt_libs %}
    - test -f $PREFIX/lib/lib{{ vtk_lib }}-{{ minor_version }}${SHLIB_EXT}  # [not win and (build_variant == "qt")]
    - if not exist %PREFIX%\\Library\\lib\\{{ vtk_lib }}-{{ minor_version }}.lib exit 1  # [win and (build_variant == "qt")]
    - if not exist %PREFIX%\\Library\\bin\\{{ vtk_lib }}-{{ minor_version }}.dll exit 1  # [win and (build_variant == "qt")]
    {% endfor %}

about:
  home: https://vtk.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file: Copyright.txt
  summary: >
    VTK is an open-source software system designed for 3D computer graphics, image processing, 
    and visualization. It provides libraries and tools for developing scientific and 
    engineering applications that require 3D visualization.
  description: |
    VTK, or Visualization Toolkit, is an open-source software system designed for 3D computer graphics, 
    image processing, and visualization. It provides a wide range of libraries and tools that are useful 
    for developing scientific and engineering applications that require 3D visualization, such as medical 
    imaging, computational fluid dynamics, and data visualization. The package supports a wide range of 
    visualization algorithms and techniques, including volume rendering, isosurface extraction, contouring, 
    and glyphs. VTK is implemented in C++ with Python bindings, and includes pre-built classes and functions 
    for manipulating and visualizing data. The package has been used in various applications, including 
    medical imaging, computational fluid dynamics, molecular modeling, and geospatial data visualization.
  dev_url: https://gitlab.kitware.com/vtk/vtk
  doc_url: https://vtk.org/documentation/

extra:
  recipe-maintainers:
    - Korijn
    - ivoflipse
    - Maxyme
    - ccordoba12
    - grlee77
    - msarahan
    - patricksnape
    - dfroger
    - tadeu
    - marcelotrevisani
