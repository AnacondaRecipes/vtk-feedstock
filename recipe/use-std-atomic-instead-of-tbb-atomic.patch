diff -urN a/Common/Core/SMP/TBB/vtkAtomic.h.in b/Common/Core/SMP/TBB/vtkAtomic.h.in
--- a/Common/Core/SMP/TBB/vtkAtomic.h.in	2021-07-02 18:31:21.000000000 +0300
+++ b/Common/Core/SMP/TBB/vtkAtomic.h.in	2022-02-15 13:43:41.679995260 +0300
@@ -25,7 +25,7 @@
 #  define __TBB_NO_IMPLICIT_LINKAGE 1
 #endif
 
-#include <tbb/atomic.h>
+#include <atomic>
 
 #ifdef _MSC_VER
 #  pragma pop_macro("__TBB_NO_IMPLICIT_LINKAGE")
@@ -110,7 +110,7 @@
   }
 
 private:
-  tbb::atomic<T> Atomic;
+  std::atomic<T> Atomic;
 };
 
 
@@ -190,7 +190,7 @@
   }
 
 private:
-  tbb::atomic<T*> Atomic;
+  std::atomic<T*> Atomic;
 };
 
 
@@ -204,12 +204,12 @@
 
   vtkAtomic(void* val)
   {
-    this->Atomic = val;
+    this->Atomic.store(val);
   }
 
   vtkAtomic(const vtkAtomic<void*> &atomic)
   {
-    this->Atomic = atomic.Atomic;
+    this->Atomic.store(atomic.Atomic.load());
   }
 
   operator void*() const
@@ -219,28 +219,28 @@
 
   void* operator=(void* val)
   {
-    this->Atomic = val;
+    this->Atomic.store(val);
     return val;
   }
 
   vtkAtomic<void*>& operator=(const vtkAtomic<void*> &atomic)
   {
-    this->Atomic = atomic.Atomic;
+    this->Atomic.store(atomic.Atomic.load());
     return *this;
   }
 
   void* load() const
   {
-    return this->Atomic;
+    return this->Atomic.load();
   }
 
   void store(void* val)
   {
-    this->Atomic = val;
+    this->Atomic.store(val);
   }
 
 private:
-  tbb::atomic<void*> Atomic;
+  std::atomic<void*> Atomic;
 };
 
 #endif
